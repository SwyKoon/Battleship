This file is for storing all the concepts learned and an overview of the logic and project.
This is a BattleShip Game built to support both single and multiplayer. It is built using SOCKET.IO

OVERVIEW OF CONCEPTS :-

1.) We have created a .container class in singleplayer.html and multiplayer.html which contains a grid for the player
    and a grid for the computer in case of single player, or a grid for player1 and another grid for player2 in case of multiplayer battle.
2.) We also have a div with class hidden-info in singleplayer.html and multiplayer.html which contains a div with class and id called 'setup-buttons' with 2 buttons:-
        a.) First button is for implementing the start functionality for the Game
        b.) Second button is for implementing the rotate ships functionality
    It also has two h3 tags with the following functionality :-
        a.) The first h3 tag with id 'whose-go' is for telling the player when its his/her turn
        b.) The second h3 tag with id 'info' is for informing a player when he has sunk the opponent's ship and when the opponent has sunk his
3.) We have another div with class 'container' which in turn has another div called 'grid-display' which contains the location of the 5 ships.
    The location tracking is done because we create the same number of divs as the number of holes in a ship. We assign each div a id which is equal to the hole number -1.
    eg: For a battleship we have 4 div inside the div with class 'ship battleship-container' with id's battleship-0, battleship-2, battleship-2 and battleship-3 respectively
4.) In index.html file we have a div with class 'splash-container' that has the following :-
        a.) A h1 tag with class 'splash-title' that is going to display the name of the Game
        b.) A div tag that contains 2 links - One is for playing singleplayer and the other button is for playing multiplayer
5.) We have added script tag inside the head tag in singleplayer.html and multiplayer.html so to make sure that the JS runs after the HTML has been loaded,
    we add an Event Listener to the entire document that runs at the event when the content has been loaded in the DOM. The name of the event is 'DOMContentLoaded'.
6.) We have created a file server.js through which the game will start running.
7.) We have also made changes to the package.json file. They are stated below :-
    a.) We have added a description
    b.) We have changed the value of the 'main' attribute from index.js file to server.js file.
        This will enable us to run the server through the 'server.js' file
    c.) We have added 2 keys to the scripts tag :-
        1.) A 'start' key that will enable the command 'node server' to deploy the production server
        2.) A 'dev' key that will run the command 'nodemon server' to run the development server
8.) The index.html file is for creating the intro splash page that gets loaded first up and provides us the option to choose the gameMode.
    The gameMode can either be 'Singleplayer' or 'Multiplayer'
9.) We have put those anchor tags that contain buttons for singleplayer or multiplayer inside a div, bcoz we want to add display: flex
    to the div with class 'splash-container' and we do not want the buttons to get affected by it.
10.) We wanted to add some margin b/w the 2 anchor tags containing the options to choose singleplayer and multiplayer.
     We add margin-left property to the anchor tag's class which is 'splash-btn'. But we also so not want the first button to recieve 
     margin for no use. So we specify margin-left property in the class 'splash-btn:first-child' to 0 to avoid adding any unwanted margin.
11.) Wherever we have added the container class to any div, we have done so, so that we can center the content contained in the div
12.) We have added the classes 'start' and 'end' to the respective ships' divs that are the first and last respectively so that we could
     add CSS to them to make their edges rounded.
13.) In the CSS file, in .taken.horizontal::before and .taken.vertical::before, we have set the borders on the start and end as 0, so as to add 
     animations of ripple effect to the side of the ships.
14.) To wrap the borders along the side on the curves of top and end, we have added the border:50% property to .taken.start.horizontal::before, .taken.end.horizontal::before, 
     .taken.start.vertical::before and .taken.end.vertical::before
15.) We are going to get the circular pegs inside the .boom::after and .miss::after class
16.) 






TOPICS DISCUSSED :-

1.) More about Socket.io - https://socket.io/docs/v4
2.) More on .dataset - https://xcatherine-jimenez.medium.com/using-dataset-in-javascript-4bfa2d657590
3.) How to toggle b/w 2 classes in JS - https://www.w3schools.com/howto/howto_js_toggle_class.asp
4.) The path module in Node.js - https://nodejs.org/api/path.html#path_path
    The path module provides utilities for working with file and directory paths.
5.) Why to set the PORT number and all related details - https://stackoverflow.com/questions/18864677/what-is-process-env-port-in-node-js
    To know more about environments in programming - https://www.quora.com/What-is-the-programming-environment?share=1
6.) CSS hsl colours - https://www.w3schools.com/css/css_colors_hsl.asp
7.) When do the hover,active and focus pseudo classes apply - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/
8.) Measurement units used in CSS - https://dev.to/matthias/units-in-css-em-rem-pt-px-vw-vh-vmin-vmax-ex-ch-53l0
9.) Child Combinator (>) - https://www.geeksforgeeks.org/what-is-greater-than-sign-selector-in-css/
10.) Declaring variables in CSS - https://openforge.io/mobile-academy/guides/mobile-app-development/how-to-declare-variables-in-css/
     https://www.w3schools.com/css/css3_variables.asp
11.) Whenever we want the child element to change along with the parents, we use the inherit property
12.) 


